%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  This Beamer template was created by Cameron Bracken.
%%  Anyone can freely use or modify it for any purpose
%%  without attribution.
%%
%%  Last Modified: January 9, 2009
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Modified into a literate programme by Seon-Wook Park for
%%  the Case Studies course for CSE at ETH Zurich.
%%
%%  Last Modified: May 3, 2014
%%

\documentclass[xcolor=x11names,compress]{beamer}

\usepackage{hyperref}
\usepackage{listings}

%% noweb configuration %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage{noweb}
\noweboptions{smallcode,webnumbering,hideunuseddefs}
\nwfilename{literate.web}

%% Beamer Layout %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\useoutertheme[subsection=false,shadow]{miniframes}
\useinnertheme{default}
\usefonttheme{serif}
\usepackage{palatino}

\setbeamerfont{title like}{shape=\scshape}
\setbeamerfont{frametitle}{shape=\scshape}

\setbeamercolor*{lower separation line head}{bg=DeepSkyBlue4}
\setbeamercolor*{normal text}{fg=black,bg=white}
\setbeamercolor*{alerted text}{fg=red}
\setbeamercolor*{example text}{fg=black}
\setbeamercolor*{structure}{fg=black}

\setbeamercolor*{palette tertiary}{fg=black,bg=black!10}
\setbeamercolor*{palette quaternary}{fg=black,bg=black!10}

\renewcommand{\(}{\begin{columns}}
\renewcommand{\)}{\end{columns}}
\newcommand{\<}[1]{\begin{column}{#1}}
\renewcommand{\>}{\end{column}}

% Remove navigation buttons
\setbeamertemplate{navigation symbols}{}

% Footer
\setbeamertemplate{footline}{
  \leavevmode
  \hbox{
    \begin{beamercolorbox}[wd=.333333\paperwidth,ht=2.25ex,dp=2ex,center]{}
      \insertauthor
    \end{beamercolorbox}
    \begin{beamercolorbox}[wd=.333333\paperwidth,ht=2.25ex,dp=2ex,center]{}
      \insertshorttitle
    \end{beamercolorbox}
    \begin{beamercolorbox}[wd=.333333\paperwidth,ht=2.25ex,dp=2ex,center]{}
      \hskip30ex\insertframenumber{} / \inserttotalframenumber
    \end{beamercolorbox}
  }
  \vskip0pt
}
\makeatother

\author{Seon-Wook Park (SP)}
\title{Literate Programming - D. E. Knuth}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\begin{document}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{\scshape Introduction}
{
  \setbeamertemplate{footline}{}
  \begin{frame}
    \title{Literate Programming}

    \subtitle{\small\textsc{Donald E. Knuth (1984)}}

    \date{\small{May 8, 2014}}

    \author{\tiny{presented by} \quad \normalsize{Seon-Wook Park} \\
    \vskip5pt\tiny{for \emph{CSE Case Studies, Spring 2014}}}

    \titlepage
  \end{frame}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection*{Agenda}
\begin{frame}{Agenda}
\tableofcontents
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{What?}
\begin{frame}{What is Literate Programming?}
\nwbegindocs{0}
\begin{itemize}
\item Item Content
\end{itemize}
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Why?}
\begin{frame}{Why Literate Programming?}
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{\scshape Ideas}
\subsection{Structure}
\begin{frame}{Structure}
\begin{itemize}

\item Table of Contents

\item Section 1
\begin{itemize}
  \item Document
  \item Code
\end{itemize}

\item Section 2
\begin{itemize}
  \item Document
  \item Code
\end{itemize}

\item Index

\end{itemize}
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{\scshape Tools}
\subsection{[[TANGLE]]}
\begin{frame}{[[TANGLE]]}

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{[[WEAVE]]}
\begin{frame}{[[WEAVE]]}

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{\scshape Example: A simple website}
\subsection*{Example: A simple website}
\begin{frame}{Writing a simple prime number generating website}
\begin{itemize}
\item Let's write a simple website.
\item This website allows users to enter a number.
\item When the number is submitted, the website tells the user
      what the next prime integer is.
\end{itemize}
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Writing [[next_prime]]}
\begin{frame}[fragile]{Writing [[next_prime]]}
\begin{itemize}
\item Let's first write a function which returns the next prime
      number given a starting number.
\end{itemize}

<<Function to get next prime>>=
def next_prime(n):
@

\begin{itemize}
\item For numbers smaller than $2$, we know what the next prime would be.
\end{itemize}
<<Deal with numbers less then 2>>=
  if n < 2:
    return 2
@
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Writing [[next_prime]]}
\begin{itemize}
\item We can assess all numbers above the given number
      until a prime is found.
\item We can consider only odd numbers.
\item We should write the [[is_prime]] function later.
\end{itemize}

<<Loop to find next prime>>=
  while True:
    n += 2
    if is_prime(n):
      return n
@
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Writing [[next_prime]]}
\begin{itemize}
\item What happens if [[n]] is even?
\item Need to adjust [[n]] before assuming [[+= 2]] skips
      even numbers.
\end{itemize}

<<Adjust even number before loop to find prime>>=
  if n % 2 is 0:
      n -= 1
@
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Writing [[next_prime]]}
\begin{itemize}
\item Now let's assemble the [[next_prime]] function.
\item This appends code to our earlier definition of [[next_prime]].
\end{itemize}

<<Function to get next prime>>=
<<Deal with numbers less then 2>>
<<Adjust even number before loop to find prime>>
<<Loop to find next prime>>
@
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Writing [[is_prime]]}
\begin{frame}[fragile]{Writing [[is_prime]]}

\begin{itemize}
\item Now let's write a function which checks if a number is prime.
\end{itemize}

<<Function to check if prime>>=
def is_prime(n):
@
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Writing [[is_prime]]}
\begin{frame}[fragile]{Writing [[is_prime]]}
\begin{itemize}
\item We can now write a few cases which we can discard early on.
\item For instance, $2$ is the only even prime, so let's deal with that
      explicitly.
\end{itemize}

<<Early discard for checking if prime>>=
  if n is 2:
    return True
@

\begin{itemize}
\item We can also say that numbers below $2$ (including negative numbers) are
      not prime.
\item Also, all other even numbers are not primes.
\end{itemize}
<<Early discard for checking if prime>>=
  if n < 2 or n % 2 is 0:
    return False
@
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Writing [[is_prime]]}
\begin{itemize}
\item Now let's write a basic loop to check if this number [[n]] is a prime number.
\item We can do this by considering numbers in a certain range. If any of the
      numbers being considered, [[i]] divide [[n]], [[n]] is not prime.
\item Let's only consider odd numbers with [[range(start, end, 2)]].
      This means [[start]] needs to be odd.
\end{itemize}

<<Loop to check if prime>>=
  for i in range(start, end, 2):
    if n % i is 0:
      return False
    return True
@
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Writing [[is_prime]]}
\begin{itemize}
\item We can be smart by defining a good range of numbers to check.
\item Obviously, the starting number cannot be smaller than $2$, since we already
      check if a number is divisible by 2.
\item Let's set [[start]] to $3$.
\end{itemize}

<<Prepare loop to check if prime>>=
  start = 3
@
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Writing [[is_prime]]}
\begin{itemize}
\item We can set the end of the range to be [[n]] itself, but we should only check
      for one of the factors not both.
\item We do this by taking $\sqrt{n}$, then rounding down.
\item Let's also add [[1]] since [[range(start, end, 2)]] excludes [[end]].
\end{itemize}

<<Prepare loop to check if prime>>=
  end = int(math.floor(math.sqrt(n))) + 1
@

\begin{itemize}
\item This requires the [[math]] package.
\end{itemize}
<<Packages to import>>=
import math
@
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Writing [[is_prime]]}
\begin{itemize}
\item Let's finish assembling our [[is_prime]] function.
\end{itemize}

<<Function to check if prime>>=
<<Early discard for checking if prime>>
<<Prepare loop to check if prime>>
<<Loop to check if prime>>
@
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection*{Webserver code}
\begin{frame}[fragile]{Webserver code}
<<Packages to import>>=
from BaseHTTPServer import HTTPServer
from SimpleHTTPServer import SimpleHTTPRequestHandler
@
<<Main function to create and start HTTP server>>=
def main():
  addr = ('127.0.0.1', 1234)
  httpd = HTTPServer(addr, MyHTTPHandler)
  # Start the server!
  while True:
    httpd.handle_request()
@

<<Run main function>>=
if __name__ == '__main__':
    main()
@
\end{frame}

\begin{frame}[fragile]{Webserver code}
<<Custom HTTP handler>>=
class MyHTTPHandler(SimpleHTTPRequestHandler):
  def do_GET(self):
    n = re.findall(r"^\/prime\/(\d+)$", self.path)
    if len(n) > 0:
      n = int(n[0])
      new_prime = next_prime(n)
      self.wfile.write(bytes(new_prime))
    else:
      SimpleHTTPRequestHandler.do_GET(self)
@

<<Packages to import>>=
import re
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Assembling the full programme}
\begin{frame}[fragile]{Assembling the full programme}

\begin{itemize}
\item With all code written, we can now lay it out in the order
      in which it is expected to be.
\item We can now speak like the computer.
\end{itemize}

<<*>>=
<<Packages to import>>
<<Function to check if prime>>
<<Function to get next prime>>
<<Custom HTTP handler>>
<<Main function to create and start HTTP server>>
<<Run main function>>
@

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection*{End}
\begin{frame}{Did you know?}
\begin{itemize}
\item This slideshow is a literate programme written for $\mathtt{noweb}$.
\item The source code can be found at: \\
  \small{\url{https://github.com/swook/literate-casestudies}}
\item Read a [[noweb]] guide here: \\
  \small{\url{http://goo.gl/kqLcwc}}
\end{itemize}
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\end{document}
